#!/usr/bin/env bash
# ================================================================
# -*- mode: bash -*-
# vi: set ft=sh
# ****************************************************************
#
# DESCRIPTION
#    Manage Auto-Scaling Groups
#
# SYNTAX & EXAMPLES
#    See 'SYNTAX' (below)
#
# ----------------------------------------------------------------
# IMPLEMENTATION
#    version         script 0.0.4
#    author          Greg Milligan
#    copyright       Copyright (c) 2017 http://www.xybersolve.com
#    license         GNU General Public License
#
# ================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
# ---------------------------------------------------------------
#
# TODO:
# ****************************************************************


# ---------------------------------------
# CONFIGFURATION
# ---------------------------------------
# strict environment
set -o errexit  # exit on command error status
set -o nounset  # no unreadonlyd variables
set -o pipefail # failr on pipe failures
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: ${?}" >&2' ERR

# ---------------------------------------
# GLOBAL VARIABLES
# ---------------------------------------
# booleans
declare -ir TRUE=1
declare -ir FALSE=0
# script info

declare -r PROGNAME="$(basename ${0})"
declare -r VERSION=0.0.1
declare -r SUBJECT=""
declare -r KEYS=""
declare -ri MIN_ARG_COUNT=1
declare -r SYNTAX=$(cat <<EOF

    Script: ${PROGNAME}
    Purpose: Manage AWS Auto-Scaling Groups
    Usage: ${PROGNAME} [options]

    Options:
      --help:  help and usage
      --version: show version info

      --show-asg=<auto-scaling group name>: Show auto scaling group
      --show-asgs: show all auto-scaling-groups

      --create-from-instance=<*like*>
      --name=<ASG Name>
      --min=<minimum size>
      --max=<maximum size>
      --size=<desired size>

      --delete-asg[=name]: delete auto-scaling-group, by name or default
      --delete-lc[=name]: delete launch configuration, by name or default
      --delete-all: delete all autoscaling groups

    Examples:
      ${PROGNAME} --create=*web* --name=web-asg --min=1 --max=2 --size=1
      ${PROGNAME} --show-asg=*web*
      ${PROGNAME} --show-asgs
      ${PROGNAME} --show-launch=*web*
      ${PROGNAME} --delete-asg=web-prod-asg
      ${PROGNAME} --delete-lc=web-prod-lc
      ${PROGNAME} --delete-all


EOF
)
# files & directories
declare -r SCRIPT_DIR="$( dirname ${0} )"
declare -r LIB_FILE="${SCRIPT_DIR}/ec2.sh"
declare -r CONF_FILE="${SCRIPT_DIR}/asg.conf.sh"

# actions
declare -i CREATE_FROM_INSTANCE=${FALSE}
declare -i SHOW_ASG=${FALSE}
declare -i SHOW_LAUNCH=${FALSE}

# flags
declare -i DRYRUN=${FALSE}

# script globals

# ---------------------------------------
# COMMON FUNCTIONS
# ---------------------------------------
usage() {
  echo "${SYNTAX}"
}

error() {
  printf "\n%s\n" "Error: ${1}"
}

die() {
  error "${1}"
  usage
  printf "\n\n"
  exit "${2:-1}"
}

show_version() {
  printf "\n\n%s  %s\n\n\n" "${PROGNAME}" "${VERSION}"
  exit 0
}

show_help() {
  printf "\n\n"
  usage
  printf "\n\n"
  exit 0
}

# ---------------------------------------
# MAIN ROUTINES
# ---------------------------------------
source "${LIB_FILE}" \
  || die "Unable to open lib file: ${LIB_FILE}" 1

  source "${CONF_FILE}" \
    || die "Unable to open conf file: ${CONF_FILE}" 2

# aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names my-asg
# aws autoscaling attach-instances --instance-ids i-a8e09d9c --auto-scaling-group-name my-asg
# aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names my-asg

__create_from_instance() {
  local dryrun=''
  local instance_id=''
  #aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name my-asg-from-instance
  # * --name=my-asg: ASG Name
  # * --min=1: Minimum size
  # * --max=2:Maximum size
  # * --size=1: Desired
  [[ -z ${INSTANCE_NAME} || -z ${MIN} || -z ${MAX} || -z ${DESIRED} ]] \
    && die "like, name, min, max, size are all required." 2

  instance_id=$( __get_instance_id_by_name "${INSTANCE_NAME}" )

  [[ -z ${instance_id} ]] \
    && die "No instance was found to match: ${INSTANCE_NAME}" 3

  echo "INSTANCE_ID: ${instance_id}"

  (( DRYRUN )) && dryrun='echo'

  "${dryrun}" aws autoscaling create-auto-scaling-group \
    --auto-scaling-group-name "${ASG_NAME}" \
    --instance-id "${instance_id}" \
    --min-size ${MIN} \
    --max-size ${MAX} \
    --desired-capacity ${DESIRED}
}

__show_launch_cfg() {
  aws autoscaling describe-launch-configurations \
    --launch-configuration-names "${LAUNCH_CFG_NAME}"
}

__show_autoscaling_group() {
  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names "${ASG_NAME}"
}

__show_autoscaling_groups() {
  aws autoscaling describe-launch-configurations \
    --query "LaunchConfigurations[*].[LaunchConfigurationName]" \
    --output text
}

__delete_asg() {
  aws autoscaling delete-auto-scaling-group --auto-scaling-group-name "${ASG_NAME}"
}

__delete_lc() {
  aws autoscaling delete-launch-configuration --launch-configuration-name "${LAUNCH_CFG_NAME}"
}

__delete_all() {
  local -a groups=()
  groups=($(aws autoscaling describe-launch-configurations \
    --query "LaunchConfigurations[*].[LaunchConfigurationName]" \
    --output text ))

  for group in "${groups[@]}"; do
    echo "Deleting: ${group}"
    aws autoscaling delete-auto-scaling-group --auto-scaling-group-name "${group}" --force-delete
  done
}

__get_opts() {
  while (( $# > 0 )); do
    local arg="${1}"; shift;
    case ${arg} in
      --help)    show_help                ;;
      --version) show_version             ;;
      --dryrun|--dry-run) DRYRUN=${TRUE}  ;;
      --show-launch*)
        SHOW_LAUNCH=${TRUE}
        [[ ${arg} =~ '=' ]] && LAUNCH_CFG_NAME="${arg#*=}"
        ;;
      --show-asgs)
        __show_autoscaling_groups; exit 0; ;;
      --show-asg*)
        SHOW_ASG=${TRUE}
        [[ ${arg} =~ '=' ]] && ASG_NAME="${arg#*=}"
        ;;

      --create*)
        CREATE_FROM_INSTANCE=${TRUE}
        [[ ${arg} =~ '=' ]] && INSTANCE_NAME="${arg#*=}" ;;
      --name*)
        [[ ${arg} =~ '=' ]] && ASG_NAME="${arg#*=}" ;;
      --min*)
        [[ ${arg} =~ '=' ]] && MIN="${arg#*=}" ;;
      --max*)
        [[ ${arg} =~ '=' ]] && MAX="${arg#*=}" ;;
      --size*)
        [[ ${arg} =~ '=' ]] && DESIRED="${arg#*=}" ;;

      --delete-asg*)
        [[ ${arg} =~ '=' ]] && ASG_NAME="${arg#*=}"
        __delete_asg; exit 0; ;;

      --delete-all)
        __delete_all
        exit 0
        ;;
      *) die "Unknown option: ${arg}" ;;
   esac
  done
  return 0
}

__dispatch() {
  (( CREATE_FROM_INSTANCE )) && __create_from_instance
  return 0
}

main() {
  (( ${#} < MIN_ARG_COUNT )) && die "Expects at least ${MIN_ARG_COUNT} arguments" 1
  (( $# > 0 )) && __get_opts "$@"

  __dispatch

  return 0
}
(( ${#} > 0 )) && main "${@}" || main
