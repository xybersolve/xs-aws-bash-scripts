#!/usr/bin/env bash
# ================================================================
# -*- mode: bash -*-
# vi: set ft=sh
# ****************************************************************
#
# DESCRIPTION
#    Wraps AWS SNS (Simple Notification Service)
#
# SYNTAX & EXAMPLES
#    See 'SYNTAX' (below)
#
# ----------------------------------------------------------------
# IMPLEMENTATION
#    version         script 0.1.1
#    author          Greg Milligan
#    copyright       Copyright (c) 2018 http://xybersolve.io
#    license         GNU General Public License
#
# ================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
# ---------------------------------------------------------------
#
# TODO:
# ****************************************************************


# ---------------------------------------
# CONFIGFURATION
# ---------------------------------------
# strict environment
set -o errexit  # exit on command error status
set -o nounset  # no unreadonlyd variables
set -o pipefail # failr on pipe failures
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: ${?}" >&2' ERR

# ---------------------------------------
# GLOBAL VARIABLES
# ---------------------------------------
# booleans
declare -ir TRUE=1
declare -ir FALSE=0
# script info

declare -r PROGNAME="$(basename ${0})"
declare -r VERSION=0.0.1
declare -ri MIN_ARG_COUNT=1
declare -r SYNTAX=$(cat <<EOF
    Script: ${PROGNAME}
    Purpose: Wraps AWS SNS (Simple Notification Service)
    Usage: ${PROGNAME} [options]

    Options:
      --help:  help and usage
      --version: show version info

      Actions:
        --send="<message>": Send message
        --create=<topic-name>: Setup topic
        --subscribe=<topic-name>: Subscribe to topic
        --unsubscribe=<topic-name>: Unsubscribe to topic
        --delete=<topic-name>: Delete topic
        --list-top<ics>: List current topics
        --list-sub<scriptions>: List current subsriptions

      Flags:
        --timestamp: Prepend timestamp to message

      Variables:
        --topic=<topic-name>: Set topic name
        --subject="<subject content>": Set subject (optional)
        --email=email@domain: Set email for topic subscription

      Examples:
        ${PROGNAME} --create=My-Topic
        ${PROGNAME} --subscribe=My-Topic --email=name@dmain.com
        ${PROGNAME} --send="My message" --topic=My-Topic
        ${PROGNAME} --send="My message" --topic=My-Topic --subject="My Subject" --timestamp
        ${PROGNAME} --list-top
        ${PROGNAME} --list-sub
        ${PROGNAME} --unsubscribe=My-Topic --email=name@domain.com
        ${PROGNAME} --delete=My-Topic
EOF
)
# files & directories
declare -r SCRIPT_DIR="$( dirname ${0} )"
declare -r COMMON_FILE="${SCRIPT_DIR}/aws-common.sh"

# actions
declare -i SEND=${FALSE}
declare -i CREATE=${FALSE}
declare -i SUBSCRIBE=${FALSE}
declare -i UNSUBSCRIBE=${FALSE}
declare -i DELETE=${FALSE}
declare -i LIST_TOPICS=${FALSE}
declare -i LIST_SUBSCRIPTIONS=${FALSE}

# flags
declare -i USE_TIMESTAMP=${FALSE}

# script globals
declare TOPIC_NAME=''
declare TOPIC_ARN=''
declare TOPIC_MESSAGE=''
declare TOPIC_SUBJECT=''
declare EMAIL=''

# ---------------------------------------
# MAIN ROUTINES
# ---------------------------------------
# do not have 'die()' routine yet - in common file
source "${COMMON_FILE}" || \
  { echo "Could not load common file: ${COMMON_FILE}"; exit 1; }

__build_topic_arn() {
  [[ -z "${TOPIC_NAME}" ]]
  TOPIC_ARN="arn:aws:sns:${REGION}:${ACCOUNT_ID}:${TOPIC_NAME}"
}

__check_topic() {
  __build_topic_arn
  aws sns list-subscriptions --output text \
    | grep -q "${TOPIC_ARN}" \
      && return 0 \
      || return 1
}

__create_topic() {
  [[ -z "${TOPIC_NAME}" ]] && die "TOPIC_NAME is not defined" 3
  aws sns create-topic --name "${TOPIC_NAME}"
}


__subscribe() {
  __build_topic_arn
  [[ -z "${ADMIN_EMAIL}" ]] && die "ADMIN_EMAIL is not defined" 5

  aws sns subscribe \
    --topic-arn "${TOPIC_ARN}" \
    --protocol email \
    --notification-endpoint "${ADMIN_EMAIL}"
}

__unsubscribe() {
  # TODO: Unsubscribe, fetch subscription id(s) - build call
  #local url='https://sns.us-west-2.amazonaws.com/unsubscribe.html?SubscriptionArn=arn:aws:sns:us-west-2:734741078887:S3-Glacier-Backup:7b399f3f-8ac4-4fb7-82a3-4447274632e4&Endpoint=xybersolve@gmail.com'
  #local url2="https://sns.${REGION}.amazonaws.com/unsubscribe.html?SubscriptionArn=arn:${TOPIC_ARN}:${SUBSCRIPTION_ID}&Endpoint=${ADMIN_EMAIL}"
  local sub_arn=''
  local -a sub_arms=()

  if [[ -n ${ADMIN_EMAIL} ]]; then
    # if email is supplied, should return one item, if any
    sub_arn=$( aws sns list-subscriptions --output text \
      | grep "${TOPIC_NAME}" \
      | grep "${EMAIL}" \
      | awk '{print $5}' )

    [[ -z "${sub_arn}" ]] && die "No subscription for for that topic and email" 6

    echo "${sub_arn}"
    #aws sns unsubscribe --subscription-arn "${sub_arn}"

  else
    # given a topic and no email, there could be multiple subscriptions
    sub_arns=( $(aws sns list-subscriptions --output text \
      | grep "${TOPIC_NAME}" \
      | awk '{print $5}' ) )

    (( ${#sub_arns[@]} == 0 )) && die "No subscription for for that topic" 7

    for arn in "${sub_arns[@]}"; do
      echo ${arn}
      #aws sns unsubscribe --subscription-arn "${sub_arn}"
    done
  fi

  # subscription arns
  #aws sns list-subscriptions --output text | grep My-New-Topic | awk '{print $5}'
  # email arns
  #aws sns list-subscriptions --output text | grep My-New-Topic | awk '{print $2}'
}

__setup_topic() {
  # TODO: Check subscription
  if ! __check_topic; then
    (( VERBOSE )) && echo Creating topic: does not exist
    __create_topic
    __subscribe
  else
    echo topic exists
  fi
}

__send_message() {
  local message="${1:-${TOPIC_MESSAGE}}"
  local datetime=$( date +%Y%m%d-%H:%M:%S )

  __build_topic_arn

  (( USE_TIMESTAMP )) \
    && message="${message} at ${datetime}"

  if [[ -z "${TOPIC_SUBJECT}" ]]; then
    aws sns publish \
      --topic-arn "${TOPIC_ARN}" \
      --message "${message}"
  else
    aws sns publish \
      --topic-arn "${TOPIC_ARN}" \
      --subject "${TOPIC_SUBJECT}" \
      --message "${message}"
  fi
}

__list_subscriptions() {
  aws sns list-subscriptions --output text
}

__list_topics() {
  aws sns list-topics --output text
}

__delete_topic() {
  if __check_topic; then
    aws sns delete-topic \
      --topic-arn "${TOPIC_ARN}"
  else
    echo "Topic does not exist!"
  fi
}

__get_opts() {
  while (( $# > 0 )); do
    local arg="${1}"; shift;
    case ${arg} in
      --help)    show_help                ;;
      --version) show_version             ;;

      # Actions
      --send*) # --option=argument
        SEND=${TRUE}
        [[ ${arg} =~ '=' ]] && TOPIC_MESSAGE="${arg#*=}"
        ;;
      --create*)
        CREATE=${TRUE}
        [[ ${arg} =~ '=' ]] && TOPIC_NAME="${arg#*=}"
        ;;
      --subscribe*)
        SUBSCRIBE=${TRUE}
        [[ ${arg} =~ '=' ]] && TOPIC_NAME="${arg#*=}"
        ;;
      --unsubscribe*)
        UNSUBSCRIBE=${TRUE}
        [[ ${arg} =~ '=' ]] && TOPIC_NAME="${arg#*=}"
        ;;

      --delete*)
        DELETE=${TRUE}
        [[ ${arg} =~ '=' ]] && TOPIC_NAME="${arg#*=}"
        ;;
      --list-top*)  LIST_TOPICS=${TRUE}               ;;
      --list-sub*) LIST_SUBSCRIPTIONS=${TRUE}  ;;

      # Flags
      --timestamp)   USE_TIMESTAMP=${TRUE}  ;;

      # Variables
      --subject*)
        [[ ${arg} =~ '=' ]] && TOPIC_SUBJECT="${arg#*=}"
        ;;
      --topic*)
        [[ ${arg} =~ '=' ]] && TOPIC_NAME="${arg#*=}"
        ;;
      --email*)
        if [[ ${arg} =~ '=' ]]; then
          ADMIN_EMAIL="${arg#*=}"
          EMAIL="${ADMIN_EMAIL}"
        fi
        ;;
      *) die "Unknown option: ${arg}" ;;
   esac
  done
  return 0
}

__dispatch() {
  (( SEND )) && __send_message
  (( CREATE )) && __create_topic
  (( DELETE )) && __delete_topic
  (( SUBSCRIBE )) && __subscribe
  (( UNSUBSCRIBE )) && __unsubscribe
  (( LIST_SUBSCRIPTIONS )) && __list_subscriptions
  (( LIST_TOPICS )) && __list_topics


  return 0
}

main() {
  (( ${#} < MIN_ARG_COUNT )) && die "Expects at least ${MIN_ARG_COUNT} arguments" 1
  (( $# > 0 )) && __get_opts "$@"

  __dispatch

  return 0
}
(( ${#} > 0 )) && main "${@}" || main
