#!/usr/bin/env bash
# ================================================================
# -*- mode: bash -*-
# vi: set ft=sh
# ****************************************************************
#
# DESCRIPTION
#    Manage Instances
#
# SYNTAX & EXAMPLES
#    See 'SYNTAX' (below)
#
# ----------------------------------------------------------------
# IMPLEMENTATION
#    version         script 0.0.4
#    author          Greg Milligan
#    copyright       Copyright (c) 2017 http://www.xybersolve.com
#    license         GNU General Public License
#
# ================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
# ---------------------------------------------------------------
#
# TODO:
# ****************************************************************


# ---------------------------------------
# CONFIGFURATION
# ---------------------------------------
# strict environment
set -o errexit  # exit on command error status
set -o nounset  # no unreadonlyd variables
set -o pipefail # failr on pipe failures
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: ${?}" >&2' ERR

# ---------------------------------------
# GLOBAL VARIABLES
# ---------------------------------------
# booleans
declare -ir TRUE=1
declare -ir FALSE=0
# script info

declare -r PROGNAME="$(basename ${0})"
declare -r VERSION=0.0.1
declare -r SUBJECT=""
declare -r KEYS=""
declare -ri MIN_ARG_COUNT=1
declare -r SYNTAX=$(cat <<EOF

    Script: ${PROGNAME}
    Purpose:
    Usage: ${PROGNAME} [options]

    Options:
      --help:  help and usage
      --version: show version info

      --get-running[=*like*]: get ids of running instances, buy name like
      --get-by-name[=*like*]: get instance ids by name like

    Examples:
      ${PROGNAME} --get-by-name
      ${PROGNAME} --get-by-name=*wrk?*

      ${PROGNAME} --get-running
EOF
)
# files & directories
declare -r SCRIPT_DIR="$( dirname ${0} )"

# actions
declare -i GET_RUNNING_INSTANCE_IDS=${FALSE}
declare -i GET_INSTANCE_ID_BY_NAME=${FALSE}

# script globals
declare INSTANCE_NAME=''

# ---------------------------------------
# COMMON FUNCTIONS
# ---------------------------------------
usage() {
  echo "${SYNTAX}"
}

error() {
  printf "\n%s\n" "Error: ${1}"
}

die() {
  error "${1}"
  usage
  printf "\n\n"
  exit "${2:-1}"
}

show_version() {
  printf "\n\n%s  %s\n\n\n" "${PROGNAME}" "${VERSION}"
  exit 0
}

show_help() {
  printf "\n\n"
  usage
  printf "\n\n"
  exit 0
}

# ---------------------------------------
# MAIN ROUTINES
# ---------------------------------------

__get_running_instance_ids() {
  local name=${1:-}
  local filter
  if [[ -z ${name} ]]; then
    filter='Name=instance-state-name,Values=running'
  else
    filter="Name=instance-state-name,Values=running Name=tag:Name,Values=${name}"
  fi
  echo "filter: ${filter}"

  # aws ec2 describe-instances --filter Name=tag:Name,Values=ADS-prod-ads
  aws ec2 describe-instances \
    --query 'Reservations[*].Instances[*].[InstanceId]' \
    --filters "${filter}" \
     --output text
}

__get_instance_id_by_name() {
  local name=${1:-}

  if [[ -n ${name} ]]; then
    aws ec2 describe-instances \
      --query 'Reservations[*].Instances[*].[InstanceId]' \
      --filters "Name=tag:Name,Values=${name}" \
      --output text
  else
    aws ec2 describe-instances \
      --query 'Reservations[*].Instances[*].[InstanceId]' --output text
  fi
}

__get_opts() {
  while (( $# > 0 )); do
    local arg="${1}"; shift;
    case ${arg} in
      --help)    show_help                ;;
      --version) show_version             ;;
      --get-running*) # --option=argument
        GET_RUNNING_INSTANCE_IDS=${TRUE}
        [[ ${arg} =~ '=' ]] && INSTANCE_NAME="${arg#*=}"
        ;;
      --get-by-name*)
        GET_INSTANCE_ID_BY_NAME=${TRUE}
        [[ ${arg} =~ '=' ]] && INSTANCE_NAME="${arg#*=}"
        ;;
      *) die "Unknown option: ${arg}" ;;
   esac
  done
  return 0
}

__dispatch() {
  (( GET_RUNNING_INSTANCE_IDS )) && __get_running_instance_ids "${INSTANCE_NAME}"
  (( GET_INSTANCE_ID_BY_NAME )) && __get_instance_id_by_name "${INSTANCE_NAME}"
  return 0
}

main() {
  (( ${#} < MIN_ARG_COUNT )) && die "Expects at least ${MIN_ARG_COUNT} arguments" 1
  (( $# > 0 )) && __get_opts "$@"

  __dispatch

  return 0
}
(( ${#} > 0 )) && main "${@}" || main
