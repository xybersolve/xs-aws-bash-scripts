#!/usr/bin/env bash
# ================================================================
# -*- mode: bash -*-
# vi: set ft=sh
# ****************************************************************
#
# DESCRIPTION
#    Script template for full bodied script
#
# SYNTAX & EXAMPLES
#    See 'SYNTAX' (below)
#
# ----------------------------------------------------------------
# IMPLEMENTATION
#    version         script 0.0.4
#    author          Greg Milligan
#    copyright       Copyright (c) 2017 http://www.xybersolve.com
#    license         GNU General Public License
#
# ================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
# ---------------------------------------------------------------
#
# TODO:
# ****************************************************************


# ---------------------------------------
# CONFIGFURATION
# ---------------------------------------
# strict environment
set -o errexit  # exit on command error status
set -o nounset  # no unreadonlyd variables
set -o pipefail # failr on pipe failures
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: ${?}" >&2' ERR

# ---------------------------------------
# GLOBAL VARIABLES
# ---------------------------------------
# booleans
declare -ir TRUE=1
declare -ir FALSE=0
# script info

declare -r PROGNAME="$(basename ${0})"
declare -r VERSION=0.0.1
declare -r SUBJECT=""
declare -r KEYS=""
declare -ri MIN_ARG_COUNT=1
declare -r SYNTAX=$(cat <<EOF

    Script: ${PROGNAME}
    Purpose:
    Usage: ${PROGNAME} [-h|--help] [-v|--version]

    Options:
      -h|--help:  help and usage
      -v| --version: show version info

      --get-ami-id=<ami type>: Get EC2 AMI id
      --create=<instance name>: Create AMI Image from instance
      --image=<name>: Set image name

    Example:
      ${PROGNAME} --get-ami-id=ubuntu (ubuntu, trusty, xenial, amazon, linux)
      ${PROGNAME} --create=*prod-web2 --image=web2

EOF
)
# files & directories
declare -r SCRIPT_DIR="$( dirname ${0} )"
declare -r CONFIG_FILE="${SCRIPT_DIR}/ec2.conf.sh"
declare -r EC2_LIB_FILE="${SCRIPT_DIR}/ec2.sh"

# actions
declare -i GET_AMI_ID=${FALSE}
declare -i CREATE_IMAGE=${FALSE}

# script globals
declare OS='ubuntu'
declare REGION='us-west-2'
declare IMAGE_ID

# ---------------------------------------
# COMMON FUNCTIONS
# ---------------------------------------
usage() {
  echo "${SYNTAX}"
}

error() {
  printf "\n%s\n" "Error: ${1}"
}

die() {
  error "${1}"
  usage
  printf "\n\n"
  exit "${2:-1}"
}

show_version() {
  printf "\n\n%s  %s\n\n\n" "${PROGNAME}" "${VERSION}"
  exit 0
}

show_help() {
  printf "\n\n"
  usage
  printf "\n\n"
  exit 0
}

# ---------------------------------------
# MAIN ROUTINES
# ---------------------------------------
source "${CONFIG_FILE}" \
  || die "Unable to load config file: ${CONFIG_FILE}" 1

source "${EC2_LIB_FILE}" \
  || die "Unable to load ec2 lib file: ${EC2_LIB_FILE}" 2

__get_image_id() {
  local os=${1:-${OS}}
  local region=${2:-${REGION}}

  local query='Images[*].[ImageId,CreationDate]'
  #local owner=amazon
  #local state=available
  #local architecture=x86_64

  # amzn-ami-hvm-2017.03.0.20170417-x86_64-gp2
  # ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20170414
  [[ -z ${os} ]] && die "OS is required field: --os=<os>"
  local -A os_name=(
    ['ubuntu']='ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64*'
    ['trusty']='ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64*'
    ['xenial']='ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*'
    ['amazon']='amzn-ami-hvm*'
    ['linux']='amzn-ami-hvm*'
  )
  local name="${os_name[${os}]:-${os_name['trusty']}}"
  local filter="Name=name,Values=${name}"
  # if not pre-assined

  # get first image in list sorted in reverse by creation date
  local image_id=$(aws ec2 describe-images \
    --filters "${filter}" \
    --query "${query}" \
    --output text \
      | sort -k2 -r \
      | head -n1 \
      | awk {'print $1'} )

  printf "%s\n" "${image_id}"
}

__fix_resolve() {
  echo $(hostname -I | cut -d\  -f1) $(hostname) | sudo tee -a /etc/hosts
}

__create_image() {
  local instance_name=${1:?name argument is required}
  local image_name=${2?image name is required argument}
  local instance_id=$( __get_instance_id_by_name "${instance_name}" )

  echo "instance_name: ${instance_name}"
  echo "instance_id: ${instance_id}"
  echo "image_name: ${image_name}"
  return

  aws ec2 create-image \
    --instance-id "${instance_id}" \
    --name "${image_name}" \
    --description "Copy of ${image_name}-${instance_id}"
}

__get_opts() {
  while (( $# > 0 )); do
    local arg="${1}"; shift;
    case ${arg} in
      --help)    show_help                ;;
      --version) show_version             ;;
      --get-ami-id*)
        GET_AMI_ID=${TRUE}
        [[ ${arg} =~ '=' ]] && OS="${arg#*=}"
        ;;
      --create*)
        CREATE_IMAGE=${TRUE}
        [[ ${arg} =~ '=' ]] && INSTANCE_NAME="${arg#*=}"
        ;;
      --image*)
        [[ ${arg} =~ '=' ]] && IMAGE_NAME="${arg#*=}"
        ;;

      *) die "Unknown option: ${arg}" ;;
   esac
  done
  return 0
}

__dispatch() {
  (( GET_AMI_ID )) && __get_image_id
  (( CREATE_IMAGE )) && __create_image "${INSTANCE_NAME}" "${IMAGE_NAME}"
  return 0
}

main() {
  (( ${#} < MIN_ARG_COUNT )) && die "Expects at least ${MIN_ARG_COUNT} arguments" 1
  (( $# > 0 )) && __get_opts "$@"

  __dispatch

  return 0
}
(( ${#} > 0 )) && main "${@}" || main
